service: my-store-app-backend

frameworkVersion: "3"

plugins:
  - serverless-auto-swagger
  - serverless-offline
  - serverless-webpack

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:AWS_REGION}
  profile: ${env:AWS_PROFILE}
  environment:
    DB_USER: ${env:DB_USER}
    DB_SERVER: ${env:DB_SERVER}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_PORT: ${env:DB_PORT}
    DB_DATABASE: ${env:DB_DATABASE}
    AWS_UPLOAD_BUCKET: ${env:AWS_UPLOAD_BUCKET}
    AWS_UPLOAD_BUCKET_CATALOG: ${env:AWS_UPLOAD_BUCKET_CATALOG}
    AWS_TARGET_BUCKET_CATALOG: ${env:AWS_TARGET_BUCKET_CATALOG}
    AUTH_USERNAME: ${env:AUTH_USERNAME}
    AUTH_PASSWORD: ${env:AUTH_PASSWORD}
    SQS_QUEUE:
      Ref: catalogItemsQueue
    SNS_ARN:
      Ref: createProductTopic

  httpApi:
    cors: true
    authorizers:
      basicAuthorizer:
        type: request
        functionName: basicAuthorizer
        resultTtlInSeconds: 300
        identitySource:
          - $request.header.Authorization
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:ListBucket'
        - 's3:GetObject'
        - 's3:DeleteObject'
        - 's3:PutObject'
      Resource: 'arn:aws:s3:::*'
    - Effect: 'Allow'
      Action: 'sqs:*'
      Resource:
        - Fn::GetAtt: [ catalogItemsQueue, Arn ]
    - Effect: 'Allow'
      Action: 'sns:*'
      Resource:
        Ref: createProductTopic

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: create-products-topic
    createProductTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: barysmarukhin@yandex.com
        Protocol: email
        TopicArn:
          Ref: createProductTopic

functions:
  basicAuthorizer:
    handler: authorizationService/authorizer.handler
  getProductsList:
    handler: productService/getProductsList.handler
    events:
      - httpApi:
          path: /products
          method: get
          swaggerTags: ['Products']
  getProductById:
    handler: productService/getProductById.handler
    events:
      - httpApi:
          path: /products/{productId}
          method: get
          swaggerTags: ['Products']
  createProduct:
    handler: productService/createProduct.handler
    events:
      - httpApi:
          path: /products
          method: post
          swaggerTags: ['Products']
  importProductsFile:
    handler: importService/importProductsFile.handler
    events:
      - httpApi:
          path: /import
          method: GET
          authorizer:
            name: basicAuthorizer
  importFileParser:
    handler: importService/importFileParser.handler
    events:
      - s3:
          bucket: ${env:AWS_UPLOAD_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - prefix: ${env:AWS_UPLOAD_BUCKET_CATALOG}/
            - suffix: .csv
          existing: true
  catalogBatchProcess:
    handler: productService/catalogBatchProcess.handler
    events:
      - sqs:
          batchSize: 2
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn

custom:
  autoswagger:
    title: 'product-service'
    useStage: true
    basePath: '/dev'
    typefiles: ['./productService/types.ts']
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: false
    packager: 'npm'
    excludeFiles: '__tests__/**/*.test.ts'